// Generated by CoffeeScript 2.5.1
'use strict';
var addApplication, applicationCountElement, applications, applicationsHeader, filterSearch, filterTeam, remove, search, searchForm, searchInput, searchSubmitButton, tabElements, table, updateTabs;

searchForm = document.querySelector('#search-form');

searchInput = document.querySelector('#search-input');

searchSubmitButton = document.querySelector('#search-submit');

table = document.querySelector('#applications-table');

applicationCountElement = document.querySelector('#application-count');

applicationsHeader = document.querySelector('#applications-header');

tabElements = document.querySelectorAll('.tab');

import {
  paginate
} from '/js/console/pages.js';

import * as notify from '/js/console/notifications.js';

applications = [];

remove = function(element) {
  return element.parentNode.removeChild(element);
};

addApplication = function(application) {
  var firstNameCell, freeFormCell, lastNameCell, statusCell, tableIcon, tableRow, teamCell, text;
  tableRow = document.createElement('tr');
  tableRow.classList.add('clickable', 'application', application.team.toLowerCase());
  tableRow.onclick = function() {
    return window.location = '/console/application/?id=' + application.id;
  };
  table.appendChild(tableRow);
  statusCell = document.createElement('td');
  tableIcon = document.createElement('img');
  statusCell.appendChild(tableIcon);
  tableIcon.classList.add('icon', 'center');
  switch (application.accepted) {
    case 0:
      tableIcon.src = '/img/progress.svg';
      break;
    case 1:
      tableIcon.src = '/img/checkmark.svg';
      break;
    case -1:
    case -2:
      tableIcon.src = '/img/cross.svg';
  }
  tableRow.appendChild(statusCell);
  firstNameCell = document.createElement('td');
  firstNameCell.innerHTML = application.firstName;
  tableRow.appendChild(firstNameCell);
  lastNameCell = document.createElement('td');
  lastNameCell.innerHTML = application.lastName;
  tableRow.appendChild(lastNameCell);
  teamCell = document.createElement('td');
  teamCell.innerHTML = application.team;
  tableRow.appendChild(teamCell);
  freeFormCell = document.createElement('td');
  if (application.freeForm.length > 200) {
    text = application.freeForm.substr(0, 200) + '...';
  } else {
    text = application.freeForm;
  }
  freeFormCell.innerHTML = text || '[No info]';
  tableRow.appendChild(freeFormCell);
  return tableRow;
};

tabElements.forEach(function(e) {
  return e.addEventListener('click', function() {
    var team;
    team = e.id.replace('tab-', '');
    return filterTeam(team);
  });
});

filterTeam = function(team) {
  var application, i, len, path;
  updateTabs(team);
  if (team !== 'all' && team !== 'embedded' && team !== 'backend' && team !== 'frontend' && team !== 'android' && team !== 'ios' && team !== 'other') {
    throw new Error('No such team');
  }
  path = new URLSearchParams(window.location.search);
  path.set('team', team);
  window.history.replaceState({
    team: team
  }, 'Team filtered', '?' + path);
  for (i = 0, len = applications.length; i < len; i++) {
    application = applications[i];
    if (application.team.toLowerCase().match(team) || team === 'all') {
      application.row.classList.remove('team-hidden');
    } else {
      application.row.classList.add('team-hidden');
    }
  }
  return paginate({
    filter: function(row) {
      return !row.className.match('hidden');
    }
  });
};

filterSearch = function(query) {
  var application, i, len, path;
  path = new URLSearchParams(window.location.search);
  path.set('q', query);
  window.history.replaceState({
    q: query
  }, 'Search filtered', '?' + path);
  for (i = 0, len = applications.length; i < len; i++) {
    application = applications[i];
    if (search(application, query)) {
      application.row.classList.remove('search-hidden');
    } else {
      application.row.classList.add('search-hidden');
    }
  }
  return paginate({
    filter: function(row) {
      return !row.className.match('hidden');
    }
  });
};

search = function(application, query) {
  var regex, searchExp;
  regex = query.split(' ').map(function(word) {
    return '(?=.*' + word + ')';
  }).join('');
  searchExp = new RegExp(regex, 'i');
  return searchExp.test(application.firstName) || searchExp.test(application.lastName) || searchExp.test(application.freeForm);
};

updateTabs = function(team) {
  var tab;
  tab = document.querySelector('#tab-' + team);
  tabElements.forEach(function(e) {
    return e.classList.remove('selected');
  });
  return tab.classList.add('selected');
};

searchSubmitButton.addEventListener('click', function() {
  if (searchInput.value) {
    return searchForm.submit();
  }
});

addEventListener('load', async function() {
  var application, i, len, params, path, res, title;
  params = new URLSearchParams(window.location.search);
  path = '/console/api/v0.1/applications/?type=' + (params.get('type') || 'all');
  switch (params.get('type')) {
    case null:
      title = 'All applications';
      break;
    case 'stars':
      title = 'My stars';
      break;
    case 'accepted':
      title = 'Accepted applications';
      break;
    case 'rejected':
      title = 'Rejected applications';
      break;
    case 'pending':
      title = 'Pending applications';
  }
  if (params.has('q')) {
    title = `Search results for '${params.get('q')}'`;
  }
  applicationsHeader.innerHTML = title;
  res = (await fetch(path).catch(function() {
    return notify.tell('Download error', 'Could not download application list. Please check your internet connection.', 'error');
  }));
  if (res.status === 429) {
    return notify.tell('Please wait', 'You have submitted too many requests and need to wait to continue', 'error');
  } else if (res.ok) {
    applications = (await res.json());
    applicationCountElement.innerHTML = `Total: ${applications.length} applications in all teams`;
    for (i = 0, len = applications.length; i < len; i++) {
      application = applications[i];
      application.row = addApplication(application);
    }
    paginate();
    filterTeam(params.get('team') || 'all', false);
    if (params.has('q')) {
      return filterSearch(params.get('q'));
    }
  }
});

//# sourceMappingURL=applications.js.map
