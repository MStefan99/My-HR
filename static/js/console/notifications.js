// Generated by CoffeeScript 2.5.1
var close, main, notificationContainer, remove;

main = document.querySelector('main');

notificationContainer = document.querySelector('#notification-container');

if (!notificationContainer) {
  notificationContainer = document.createElement('div');
  notificationContainer.id = 'notification-container';
  main.appendChild(notificationContainer);
}

remove = function(element, delay = 0) {
  if (element && element.parentNode) {
    return setTimeout(function() {
      return element.parentNode.removeChild(element);
    }, delay);
  }
};

close = function(notificationElement) {
  notificationElement.classList.add('inactive');
  return remove(notificationElement, 500);
};

export var tell = function(title, message, type = 'ok', timeout = 5000) {
  var closeElement, messageElement, notificationElement, titleElement;
  if (type !== 'ok' && type !== 'warning' && type !== 'error') {
    throw new Error('No such notification type');
  }
  notificationElement = document.createElement('div');
  notificationElement.classList.add('notification', 'inactive', type);
  setTimeout(function() {
    return notificationElement.classList.remove('inactive');
  }, 10);
  closeElement = document.createElement('span');
  closeElement.classList.add('icon', 'close-icon', 'clickable');
  notificationElement.appendChild(closeElement);
  titleElement = document.createElement('h2');
  titleElement.innerText = title;
  notificationElement.appendChild(titleElement);
  messageElement = document.createElement('p');
  messageElement.innerText = message;
  notificationElement.appendChild(messageElement);
  notificationContainer.appendChild(notificationElement);
  return new Promise(function(resolve, reject) {
    closeElement.addEventListener('click', function() {
      close(notificationElement);
      return resolve();
    });
    if (timeout > 0) {
      return setTimeout(function() {
        close(notificationElement);
        return resolve();
      }, timeout);
    }
  });
};

export var ask = function(title, message, type = 'ok', timeout = 10000) {
  var confirmElement, messageElement, notificationElement, rejectElement, titleElement;
  if (type !== 'ok' && type !== 'warning' && type !== 'error') {
    throw new Error('No such notification type');
  }
  notificationElement = document.createElement('div');
  notificationElement.classList.add('notification', 'inactive', type);
  setTimeout(function() {
    return notificationElement.classList.remove('inactive');
  }, 10);
  titleElement = document.createElement('h2');
  titleElement.innerText = title;
  notificationElement.appendChild(titleElement);
  messageElement = document.createElement('p');
  messageElement.innerText = message;
  notificationElement.appendChild(messageElement);
  confirmElement = document.createElement('span');
  confirmElement.classList.add('button', 'primary', 'clickable');
  confirmElement.innerText = 'Yes';
  notificationElement.appendChild(confirmElement);
  rejectElement = document.createElement('span');
  rejectElement.classList.add('button', 'secondary', 'clickable');
  rejectElement.innerText = 'No';
  notificationElement.appendChild(rejectElement);
  notificationContainer.appendChild(notificationElement);
  return new Promise(function(resolve, reject) {
    confirmElement.addEventListener('click', function() {
      resolve(true);
      return close(notificationElement);
    });
    rejectElement.addEventListener('click', function() {
      resolve(false);
      return close(notificationElement);
    });
    if (timeout > 0) {
      return setTimeout(function() {
        close(notificationElement);
        return resolve(false);
      }, timeout);
    }
  });
};

//# sourceMappingURL=notifications.js.map
