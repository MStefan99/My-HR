// Generated by CoffeeScript 2.5.1
'use strict';
var insertAfter, openPage, remove, setupPagination;

remove = function(element) {
  return element.parentNode.removeChild(element);
};

insertAfter = function(referenceNode, newNode) {
  return referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);
};

openPage = function(pageNumber, nodes, pageSize) {
  var endIndex, firstPageCount, i, j, ref, ref1, results, startIndex;
  nodes.forEach(function(node) {
    return node.classList.add('page-hidden');
  });
  firstPageCount = nodes.length % pageSize || pageSize;
  if (!pageNumber) {
    startIndex = 0;
    endIndex = firstPageCount;
  } else {
    startIndex = (pageNumber - 1) * pageSize + firstPageCount;
    endIndex = pageNumber * pageSize + firstPageCount;
  }
  if (nodes.length) {
    results = [];
    for (i = j = ref = startIndex, ref1 = endIndex - 1; (ref <= ref1 ? j <= ref1 : j >= ref1); i = ref <= ref1 ? ++j : --j) {
      results.push(nodes[i].classList.remove('page-hidden'));
    }
    return results;
  }
};

setupPagination = function(table, options = {}) {
  var body, i, j, pageCount, pageSize, paginator, ref, rows;
  pageSize = options.pageSize || 10;
  // Counting rows
  body = table.querySelector('tbody');
  rows = [...body.childNodes];
  if ('filter' in options) {
    rows = rows.filter(function(row) {
      return options.filter(row);
    });
  }
  pageCount = Math.ceil(rows.length / pageSize);
  // Creating and adding paginator div
  paginator = document.createElement('div');
  paginator.classList.add('paginator');
  insertAfter(table, paginator);
  // Creating and adding page buttons to paginator
  if (pageCount > 1) {
    for (i = j = 0, ref = pageCount - 1; (0 <= ref ? j <= ref : j >= ref); i = 0 <= ref ? ++j : --j) {
      (function(i) {
        var pageButton;
        pageButton = document.createElement('div');
        pageButton.classList.add('button', 'page-selector');
        if (i === 0) {
          pageButton.classList.add('pressed');
        }
        pageButton.addEventListener('click', function() {
          var pageButtons;
          openPage(i, rows, pageSize);
          pageButtons = document.querySelectorAll('.page-selector');
          pageButtons.forEach(function(button) {
            return button.classList.remove('pressed');
          });
          return pageButton.classList.add('pressed');
        });
        pageButton.innerHTML = i + 1;
        return paginator.appendChild(pageButton);
      })(i);
    }
  }
  return openPage(0, rows, pageSize);
};

export var paginate = function(options) {
  var j, len, results, table, tables;
  // Removing old pagination in case table is re-paginated
  document.querySelectorAll('.paginator').forEach(function(paginator) {
    return remove(paginator);
  });
  document.querySelectorAll('.page-hidden').forEach(function(element) {
    return element.classList.remove('page-hidden');
  });
  // Setting up new pagination
  tables = document.querySelectorAll('.paginated');
  results = [];
  for (j = 0, len = tables.length; j < len; j++) {
    table = tables[j];
    results.push(setupPagination(table, options));
  }
  return results;
};

//# sourceMappingURL=pages.js.map
