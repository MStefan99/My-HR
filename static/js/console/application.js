// Generated by CoffeeScript 2.5.1
'use strict';
var Storage, acceptButton, acceptedBadge, application, backupEmailElement, backupPhoneElement, deleteProposal, desktopButton, emailElement, fileDownloadLink, fileViewLink, firstNameElement, freeFormElement, getBasePath, lastNameElement, linksElement, phoneElement, propose, rejectButton, rejectedBadge, remove, setBadges, setData, setListeners, setupApplication, shareButton, star, starButton, starIcon, starText, statusIcon, teamElement, unstar, updateStar, updateStatus;

starText = document.querySelector('#star-text');

starIcon = document.querySelector('#star-icon');

statusIcon = document.querySelector('#status-icon');

starButton = document.querySelector('#star-button');

shareButton = document.querySelector('#share-button');

desktopButton = document.querySelector('#desktop-button');

acceptButton = document.querySelector('#accept-button');

rejectButton = document.querySelector('#reject-button');

acceptedBadge = document.querySelector('#accepted-badge');

rejectedBadge = document.querySelector('#rejected-badge');

firstNameElement = document.querySelector('#first-name');

lastNameElement = document.querySelector('#last-name');

teamElement = document.querySelector('#team');

emailElement = document.querySelector('#email');

backupEmailElement = document.querySelector('#backup-email');

phoneElement = document.querySelector('#phone');

backupPhoneElement = document.querySelector('#backup-phone');

linksElement = document.querySelector('#links');

freeFormElement = document.querySelector('#free-form');

fileDownloadLink = document.querySelector('#cv-download');

fileViewLink = document.querySelector('#cv-view');

application = {};

Storage = window.localStorage;

import {
  saveRequest
} from '/js/console/main.js';

import * as notify from '/js/console/notifications.js';

getBasePath = function() {
  return '/console/api/v0.1/applications/' + application.id;
};

remove = function(element) {
  return element.parentNode.removeChild(element);
};

propose = async function(status) {
  var init, res;
  if ((await notify.ask('Make a proposal', `Are you sure you want to ${status === 1 ? 'accept' : 'reject'} ${firstNameElement.innerHTML}\'s application?`, 'warning'))) {
    init = {
      method: 'post',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        status: status
      })
    };
    res = (await fetch(getBasePath() + '/proposals/', init).catch(function() {
      return saveRequest(getBasePath() + '/proposals/', init);
    }));
    if (res.status === 429) {
      return notify.tell('Please wait', 'You need to wait before submitting another proposal', 'error');
    } else if (res.ok) {
      switch ((await res.text())) {
        case 'NO_APPLICATION':
          return notify.tell('Not found', 'The application was not found. It may have been deleted or the URL is wrong.', 'error');
        case 'INVALID_STATUS':
          return notify.tell('Error', 'Your proposal could not be processed due to the internal error. Please contact the support.', 'error');
        case 'ALREADY_ACCEPTED':
          return notify.tell('Already accepted', 'This application was already accepted, you cannot change its status anymore.', 'error');
        case 'ALREADY_REJECTED':
          return notify.tell('Already rejected', 'This application was already rejected, you cannot change its status anymore.', 'error');
        case 'ALREADY_EXISTS':
          return notify.tell('Already proposed', 'You have already made a proposal for this application. Please take it back first.', 'error');
        case 'ACCEPTED':
          return application.accepted = 1;
        case 'REJECTED':
          return application.accepted = -1;
        case 'Created':
          switch (status) {
            case 1:
              application.proposals.accepted = application.proposals.accepted + 1 || 1;
              break;
            case -1:
              application.proposals.rejected = application.proposals.rejected + 1 || 1;
          }
          application.proposals.my = status;
          notify.tell('Proposal saved', 'Your proposal was saved');
          updateStatus();
          return setBadges();
      }
    }
  }
};

deleteProposal = async function() {
  var init, res;
  if ((await notify.ask('Cancel proposal', 'Are you sure you want to take your proposal back?', 'warning'))) {
    init = {
      method: 'delete',
      headers: {
        'Content-Type': 'application/json'
      }
    };
    res = (await fetch(getBasePath() + '/proposals/', init).catch(function() {
      return saveRequest(getBasePath() + '/proposals/', init);
    }));
    if (res.status === 429) {
      return notify.tell('Please wait', 'You need to wait before removing your proposal', 'error');
    } else if (res.ok) {
      switch ((await res.text())) {
        case 'ALREADY_ACCEPTED':
          return notify.tell('Already accepted', 'This application was already accepted, you cannot change its status anymore.', 'error');
        case 'ALREADY_REJECTED':
          return notify.tell('Already rejected', 'This application was already rejected, you cannot change its status anymore.', 'error');
        case 'OK':
          switch (application.proposals.my) {
            case 1:
              application.proposals.accepted -= 1;
              break;
            case -1:
              application.proposals.rejected -= 1;
          }
          application.proposals.my = null;
          notify.tell('Proposal deleted', 'Your proposal was deleted');
          updateStatus();
          return setBadges();
      }
    }
  }
};

setBadges = function() {
  acceptedBadge.innerHTML = `${application.proposals.accepted || 0}/${application.proposals.needed}`;
  return rejectedBadge.innerHTML = `${application.proposals.rejected || 0}/${application.proposals.needed}`;
};

setListeners = function() {
  desktopButton.addEventListener('click', function() {
    Storage.setItem('desktop_autorun', JSON.stringify({
      src: window.location.pathname + window.location.search,
      name: application.firstName + '\'s application',
      img: '/img/application.svg'
    }));
    return window.location.href = '/console/desktop/';
  });
  return shareButton.addEventListener('click', async function() {
    if (navigator.clipboard != null) {
      await navigator.clipboard.writeText(window.location.href);
      return notify.tell('Copied', 'Link copied to clipboard!');
    } else {
      return notify.tell('Error', 'Unfortunately, we can\'t copy the link on your device. Please copy the link from the address bar manually.', 'error');
    }
  });
};

setData = function() {
  var links;
  firstNameElement.innerHTML = application.firstName;
  lastNameElement.innerHTML = application.lastName;
  teamElement.innerHTML = application.team;
  emailElement.innerHTML = application.email;
  emailElement.href = 'mailto:' + application.email;
  backupEmailElement.innerHTML = application.backupEmail;
  backupEmailElement.href = 'mailto:' + application.backupEmail;
  phoneElement.innerHTML = application.phone;
  phoneElement.href = 'tel:' + application.phone;
  if (application.backupPhone) {
    backupPhoneElement.innerHTML = application.backupPhone;
    backupPhoneElement.href = 'tel:' + application.backupPhone;
  } else {
    backupPhoneElement.innerHTML = '[Not provided]';
  }
  links = application.links.replace(/(http:\/\/|https:\/\/)?(\S*?\.\S*)/g, '<a href="https://$2" target="_blank">$&</a>');
  linksElement.innerHTML = links || '[Empty]';
  freeFormElement.innerHTML = application.freeForm || '[Empty]';
  fileDownloadLink.href = '/console/file/' + application.filePath;
  return fileViewLink.href = '/console/view_file/' + application.filePath;
};

setupApplication = function() {
  document.title = application.firstName + '\'s application - My HR';
  statusIcon.alt = 'Status icon';
  updateStar();
  setBadges();
  setListeners();
  setData();
  return updateStatus();
};

updateStar = function() {
  if (application.starred) {
    starIcon.src = '/img/star-active.svg';
    starText.innerHTML = 'Unstar';
    return starButton.onclick = unstar;
  } else {
    starIcon.src = '/img/star-inactive.svg';
    starText.innerHTML = 'Star';
    return starButton.onclick = star;
  }
};

updateStatus = function() {
  if (application.accepted) {
    remove(acceptButton);
    remove(rejectButton);
    switch (application.accepted) {
      case 1:
        return statusIcon.src = '/img/checkmark.svg';
      case -1:
        return statusIcon.src = '/img/cross.svg';
    }
  } else {
    statusIcon.src = '/img/progress.svg';
    switch (application.proposals.my) {
      case 1:
        acceptButton.classList.add('pressed');
        rejectButton.classList.add('disabled');
        acceptButton.title = 'Take back your proposal';
        rejectButton.title = 'You have already proposed to accept this application';
        return acceptButton.onclick = deleteProposal;
      case -1:
      case -2:
        acceptButton.classList.add('disabled');
        rejectButton.classList.add('pressed');
        acceptButton.title = 'You have already proposed to reject this application';
        rejectButton.title = 'Take back your proposal';
        return rejectButton.onclick = deleteProposal;
      default:
        acceptButton.classList.remove('pressed', 'disabled');
        rejectButton.classList.remove('pressed', 'disabled');
        acceptButton.title = 'Accept this application';
        rejectButton.title = 'Reject this application';
        acceptButton.onclick = function() {
          return propose(1);
        };
        return rejectButton.onclick = function() {
          return propose(-1);
        };
    }
  }
};

star = async function() {
  var init, res;
  init = {
    method: 'post',
    headers: {
      'Content-Type': 'application/json'
    }
  };
  res = (await fetch(getBasePath() + '/stars/', init).catch(function() {
    return saveRequest(getBasePath() + '/stars/', init);
  }));
  if (res.status === 429) {
    return notify.tell('Please wait', 'You have submitted too many requests and need to wait to continue', 'error');
  } else if (res.ok) {
    application.starred = true;
    updateStar();
    return notify.tell('Starred', 'You can now find this application in the "stars" section');
  }
};

unstar = async function() {
  var init, res;
  init = {
    method: 'delete',
    headers: {
      'Content-Type': 'application/json'
    }
  };
  res = (await fetch(getBasePath() + '/stars/', init).catch(function() {
    return saveRequest(getBasePath() + '/stars/', init);
  }));
  if (res.status === 429) {
    return notify.tell('Please wait', 'You have submitted too many requests and need to wait to continue', 'error');
  } else if (res.ok) {
    application.starred = false;
    updateStar();
    return notify.tell('Unstarred', 'Application removed from your stars');
  }
};

addEventListener('load', async function() {
  var params, res;
  if (navigator.clipboard == null) {
    shareButton.classList.add('hidden');
  }
  params = new URLSearchParams(window.location.search);
  res = (await fetch(`/console/api/v0.1/applications/${params.get('id')}/`).catch(function() {
    return notify.tell('Download error', 'Could not download application data. Please check your internet connection.', 'error');
  }));
  if (res.status === 404) {
    return notify.tell('Not found', 'Application not found. It may have been deleted or the link may be invalid.', 'error');
  } else {
    application = (await res.json());
    return setupApplication();
  }
});

//# sourceMappingURL=application.js.map
