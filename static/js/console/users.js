// Generated by CoffeeScript 2.5.1
'use strict';
var addUser, formElement, remove, userAdminCheckbox, usernameInput, usersTable;

formElement = document.querySelector('form');

usersTable = document.querySelector('#users-table');

usernameInput = document.querySelector('#username');

userAdminCheckbox = document.querySelector('#admin');

import {
  saveRequest
} from '/js/console/main.js';

import * as notify from '/js/console/notifications.js';

remove = function(element) {
  return element.parentNode.removeChild(element);
};

addUser = function(user) {
  var adminCell, otpCell, registeredCell, removeCell, removeLink, resetCell, resetLink, tableRow, usernameCell;
  tableRow = document.createElement('tr');
  usersTable.appendChild(tableRow);
  usernameCell = document.createElement('td');
  usernameCell.innerHTML = user.username;
  tableRow.appendChild(usernameCell);
  adminCell = document.createElement('td');
  adminCell.innerHTML = user.admin ? 'Yes' : 'No';
  tableRow.appendChild(adminCell);
  registeredCell = document.createElement('td');
  registeredCell.innerHTML = user.setupCode || '[Already set up]';
  tableRow.appendChild(registeredCell);
  otpCell = document.createElement('td');
  otpCell.innerHTML = user.otpSetup ? 'Yes' : 'No';
  tableRow.appendChild(otpCell);
  resetCell = document.createElement('td');
  tableRow.appendChild(resetCell);
  resetLink = document.createElement('span');
  resetCell.appendChild(resetLink);
  resetLink.classList.add('clickable');
  resetLink.innerHTML = 'Reset';
  if (user.username !== 'System') {
    resetLink.addEventListener('click', async function() {
      var init, res, resetOTP, updatedUser;
      if ((await notify.ask('Resetting user', `You are about to reset user ${user.username}. \nAre you sure you want to continue?`, 'warning'))) {
        resetOTP = (await notify.ask('2FA reset', 'Do you also want to reset the 2FA?', 'warning'));
        init = {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            username: user.username,
            resetPassword: true,
            resetOTP: resetOTP
          })
        };
        res = (await fetch('/console/api/v0.1/users/', init).catch(function() {
          return saveRequest('/console/api/v0.1/users/', init);
        }));
        if (res.status === 429) {
          return notify.tell('Please wait', 'You have submitted too many requests and need to wait to continue', 'error');
        } else if (!res.ok) {
          switch ((await res.text())) {
            case 'CANNOT_RESET_SYSTEM':
              return notify.tell('System account', 'You cannot reset this user account since it is required for proper system operation', 'error');
          }
        } else {
          updatedUser = (await res.json());
          registeredCell.innerHTML = updatedUser.setupCode;
          if (resetOTP) {
            otpCell.innerHTML = 'No';
          }
          return notify.tell('Reset complete', 'User can now create a new password');
        }
      }
    });
  }
  removeCell = document.createElement('td');
  tableRow.appendChild(removeCell);
  removeLink = document.createElement('span');
  removeLink.classList.add('clickable');
  removeCell.appendChild(removeLink);
  removeLink.innerHTML = 'Remove';
  if (user.username !== 'admin' && user.username !== 'System') {
    return removeLink.addEventListener('click', async function() {
      var init, res;
      if ((await notify.ask('Deleting user', `If you continue, user \"${user.username}\" will be deleted. \nAre you sure you want to continue?`, 'warning'))) {
        init = {
          method: 'delete',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            username: user.username
          })
        };
        res = (await fetch('/console/api/v0.1/users/', init).catch(function() {
          return saveRequest('/console/api/v0.1/users/', init);
        }));
        if (res.status === 429) {
          return notify.tell('Please wait', 'You have submitted too many requests and need to wait to continue', 'error');
        } else if (!res.ok) {
          switch ((await res.text())) {
            case 'CANNOT_DELETE_ADMIN':
              return notify.tell('System account', 'You cannot delete this user account since it is required for proper system operation', 'error');
          }
        } else {
          remove(tableRow);
          return notify.tell('User deleted', 'User was successfully deleted');
        }
      }
    });
  }
};

addEventListener('load', async function() {
  var i, len, res, results, user, users;
  res = (await fetch('/console/api/v0.1/users/').catch(function() {
    return notify.tell('Download error', 'Could not download the user list. Please check your internet connection.', 'error');
  }));
  if (res.status === 429) {
    return notify.tell('Please wait', 'You have submitted too many requests and need to wait to continue', 'error');
  } else if (res.ok) {
    users = (await res.json());
    results = [];
    for (i = 0, len = users.length; i < len; i++) {
      user = users[i];
      results.push(addUser(user));
    }
    return results;
  }
});

formElement.addEventListener('submit', async function(e) {
  var admin, init, res, username;
  e.preventDefault();
  username = usernameInput.value;
  admin = userAdminCheckbox.checked;
  init = {
    method: 'post',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      username: username,
      admin: admin
    })
  };
  res = (await fetch('/console/api/v0.1/users/', init).catch(function() {
    return saveRequest('/console/api/v0.1/users/', init);
  }));
  if (res.status === 429) {
    return notify.tell('Please wait', 'You have submitted too many requests and need to wait to continue', 'error');
  } else if (!res.ok) {
    switch ((await res.text())) {
      case 'DUPLICATE_USERNAME':
        return notify.tell('Duplicate username', 'User with such username already exists please choose another or delete that user.', 'error');
    }
  } else {
    addUser((await res.json()));
    return notify.tell('User added', 'User was successfully added');
  }
});

//# sourceMappingURL=users.js.map
