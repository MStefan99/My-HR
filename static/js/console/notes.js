// Generated by CoffeeScript 2.5.1
'use strict';
var Months, addNote, filter, filterAllButton, filterPrivateButton, filterSharedButton, filterType, getPath, noteContainer, noteSubmitButton, noteTextarea, privateButton, remove, shared, sharedButton;

noteContainer = document.querySelector('#note-container');

privateButton = document.querySelector('#private-button');

sharedButton = document.querySelector('#shared-button');

noteTextarea = document.querySelector('#note-textarea');

noteSubmitButton = document.querySelector('#note-submit');

filterPrivateButton = document.querySelector('#filter-private');

filterSharedButton = document.querySelector('#filter-shared');

filterAllButton = document.querySelector('#filter-all');

shared = false;

filterType = 'all';

Months = Object.freeze(['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']);

import {
  saveRequest
} from '/js/console/main.js';

import * as notify from '/js/console/notifications.js';

getPath = function() {
  var applicationID, params;
  params = new URLSearchParams(window.location.search);
  applicationID = params.get('id');
  return `/console/api/v0.1/${applicationID ? 'applications/' + applicationID + '/' : ''}notes/`;
};

remove = function(element) {
  return element.parentNode.removeChild(element);
};

addNote = function(note) {
  var noteDeleteButton, noteElement, noteMessageElement, noteSenderElement, noteSharedText, now, time;
  noteElement = document.createElement('div');
  noteElement.classList.add('note');
  noteContainer.appendChild(noteElement);
  noteSenderElement = document.createElement('span');
  noteSenderElement.classList.add('sender');
  time = new Date(note.time);
  noteSenderElement.innerHTML = `I wrote at ${time.toLocaleString('en-GB')}:`;
  noteElement.appendChild(noteSenderElement);
  noteMessageElement = document.createElement('p');
  noteMessageElement.innerText = note.message;
  noteElement.appendChild(noteMessageElement);
  if (note.my) {
    note.author = 'I';
    noteElement.classList.add('my');
    noteDeleteButton = document.createElement('span');
    noteDeleteButton.classList.add('button');
    noteDeleteButton.innerHTML = 'Delete';
    noteDeleteButton.addEventListener('click', async function() {
      var init, res;
      if ((await notify.ask('Deleting note', `Are you sure you want to delete the following note? \n\"${note.message}\"`, 'warning'))) {
        init = {
          method: 'delete',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            id: note.id
          })
        };
        res = (await fetch('/console/api/v0.1/notes/', init).catch(function() {
          return saveRequest('/console/api/v0.1/notes', init);
        }));
        if (res.status === 429) {
          return notify.tell('Please wait', 'You have submitted too many requests and need to wait to continue', 'error');
        } else if (res.ok) {
          remove(noteElement);
          return notify.tell('Note deleted', 'Your note was successfully deleted');
        }
      }
    });
    noteElement.appendChild(noteDeleteButton);
    noteSharedText = document.createElement('span');
    noteSharedText.classList.add('access-mode');
    if (note.shared) {
      noteElement.classList.add('shared');
      noteSharedText.innerHTML = 'Public';
    } else {
      noteElement.classList.add('private');
      noteSharedText.innerHTML = 'Private';
    }
    noteElement.appendChild(noteSharedText);
  } else {
    noteElement.classList.add('shared');
  }
  noteSenderElement.innerHTML = `${note.author} wrote `;
  now = new Date();
  if (now.getMonth() !== time.getMonth() || now.getDate() !== time.getDate()) {
    noteSenderElement.innerHTML += `on ${Months[time.getMonth()]} ${time.getDate()} `;
  }
  if (now.getFullYear() !== time.getFullYear()) {
    noteSenderElement.innerHTML += `${time.getFullYear()} `;
  }
  return noteSenderElement.innerHTML += `at ${time.getHours()}:${time.getMinutes().toString().padStart(2, '0')}`;
};

filter = function(type = filterType) {
  var notes;
  if (type !== 'all' && type !== 'shared' && type !== 'private') {
    throw new Error('No such filter type');
  }
  filterType = type;
  filterAllButton.classList.remove('pressed');
  filterSharedButton.classList.remove('pressed');
  filterPrivateButton.classList.remove('pressed');
  notes = document.querySelectorAll('.note');
  notes.forEach(function(note) {
    return note.classList.remove('hidden');
  });
  switch (type) {
    case 'all':
      return filterAllButton.classList.add('pressed');
    case 'private':
      filterPrivateButton.classList.add('pressed');
      return document.querySelectorAll('.note.shared').forEach(function(note) {
        return note.classList.add('hidden');
      });
    case 'shared':
      filterSharedButton.classList.add('pressed');
      return document.querySelectorAll('.note.private').forEach(function(note) {
        return note.classList.add('hidden');
      });
  }
};

privateButton.addEventListener('click', function() {
  sharedButton.classList.remove('pressed');
  privateButton.classList.add('pressed');
  return shared = false;
});

sharedButton.addEventListener('click', function() {
  privateButton.classList.remove('pressed');
  sharedButton.classList.add('pressed');
  return shared = true;
});

filterAllButton.addEventListener('click', function() {
  return filter('all');
});

filterPrivateButton.addEventListener('click', function() {
  return filter('private');
});

filterSharedButton.addEventListener('click', function() {
  return filter('shared');
});

'keyup change paste'.split(' ').forEach(function(event) {
  return noteTextarea.addEventListener(event, function() {
    if (!noteTextarea.value) {
      return noteSubmitButton.classList.add('disabled');
    } else {
      return noteSubmitButton.classList.remove('disabled');
    }
  });
});

noteSubmitButton.addEventListener('click', async function() {
  var init, note, res;
  filterType = shared ? 'shared' : 'private';
  if (!noteTextarea.value) {
    return notify.tell('Empty note', 'Please enter a message', 'error');
  } else {
    init = {
      method: 'post',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        shared: shared,
        message: noteTextarea.value
      })
    };
    res = (await fetch(getPath(), init).catch(function() {
      saveRequest(getPath(), init);
      noteTextarea.value = '';
      return noteSubmitButton.classList.add('disabled');
    }));
    if (res.status === 429) {
      return notify.tell('Please wait', 'You have submitted too many requests and need to wait to continue', 'error');
    } else if (res.ok) {
      noteTextarea.value = '';
      noteSubmitButton.classList.add('disabled');
      note = (await res.json());
      addNote(note);
      filter();
      return notify.tell('Note saved', 'Your note was saved');
    }
  }
});

addEventListener('load', async function() {
  var i, len, note, notes, res;
  res = (await fetch(getPath()).catch(function() {
    return notify.tell('Download error', 'Could not download notes. Please check your internet connection.', 'error');
  }));
  if (res.status === 429) {
    return notify.tell('Please wait', 'You have submitted too many requests and need to wait to continue', 'error');
  } else if (res.ok) {
    notes = (await res.json());
    for (i = 0, len = notes.length; i < len; i++) {
      note = notes[i];
      addNote(note);
    }
    return filter();
  }
});

//# sourceMappingURL=notes.js.map
